

class Task{
taskDescription;
dueDate;
priorityLevel;
isCompleted;

getTheTask( ){
    return "Task Description: "+this.taskDescription+" "+"Due Date: "+ this.dueDate.getDay()+"-"+this.dueDate.getMonth()+"-"+this.dueDate.getFullYear()+" "+"Pirority: "+this.priorityLevel;

}
  constructor (taskDescription ,dueDate,priorityLevel,isCompleted) {
      this.taskDescription= taskDescription;
      this.dueDate = dueDate;
      this.priorityLevel=priorityLevel;
      this.isCompleted=isCompleted;
    }

    
   
}
var tasks=[new Task("a1",new Date(2027, 4, 20),'2',false), new Task("a2",new Date(2023, 4, 20),'1',true)];
function execute(choice){
    switch(choice){
        case 1:
            var  DT = prompt('Enter Task Description');
            var  DD = prompt('Enter Task Due Date as day-month-year');
            var  PL = prompt('Enter Task Priority Level');
            var D=DD.split("-");
           let task=new Task(DT,new Date(D[2],D[1],D[0]),PL,false);
           tasks.push(task);
           console.log('Task is added\n');
            break;
        case 2:
            for(let i=0;i<tasks.length;i++){
             
                console.log((i+1)+". "+tasks[i].getTheTask( ));
            }
            console.log('');
          break;
        case 3:
            for(let i=0;i<tasks.length;i++){
                if(tasks[i].isCompleted==true)
                console.log((i+1)+". "+tasks[i].getTheTask( ));
            }
            console.log('');
            break;  

        case 4: var  t= parseInt(prompt('Which task number you want to mark as done?'));
        Task.prototype.id = t-1;
        var filterTask = tasks.filter(function(task) {
            return task.id == t-1;
          });
        
        filterTask[0].isCompleted=true;
        tasks.splice(t-1, 1, filterTask[0] );
        console.log('Task is marked as done');

        break;
     case 5:
        var  t= parseInt(prompt('Which task number you want to delete?'));
        tasks.splice(t-1, 1);
        console.log('Task is deleted');
        break;
      
     case 6:
        tasks.sort(function(a, b) {
            var dateA = new Date(a.dueDate);
            var dateB = new Date(b.dueDate);
            return dateA - dateB;
          });
          console.log('Tasks sorted');
        break;

        case 7:
            tasks.sort(function(a, b) {
              
                return a.priorityLevel- b.priorityLevel;
              });
              console.log('Tasks sorted');
            break;
      case 8:
        tasks.splice(0,tasks.length)
        console.log('Tasks cleared');
        break;
      default: return "yes";


    }
 return "";
}
console.log("***************************");
console.log("Welcome to JS TODO-APP");
console.log("***************************");
console.log("Select an action:\n"+
"1) Add a new task\n"
+"2) List all tasks\n"
+"3) List completed tasks\n"
+"4) Mark the task as done\n"
+"5) Delete a task\n"
+"6) Sort tasks by the due date\n"
+"7) Sort tasks by priority\n"
+"8) Clear all tasks\n"
+"9) exit\n"
+"***************************");
while(true){
    var  cho = prompt('What your choice?');
var choice = parseInt(cho);
 if(execute(choice)=="yes") break;
}
